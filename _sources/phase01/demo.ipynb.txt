{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Demo: Findings vs No Findings Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Phase 01 models—built on Tensorflow- and Keras-backed stacked BiLSTM architectures—follow a similar training scheme that includes:\n",
    "\n",
    "1. Loading the data\n",
    "1. Defining model constants\n",
    "1. Tokenizing the data using a GloVe embedding\n",
    "1. Defining the model\n",
    "1. Training the model\n",
    "1. Evaluating the results\n",
    "\n",
    "This demo aims to provide a notebook with extended annotations for a more in-depth guide for understanding the code using dummy data. However, complete code can be found in ``/path/to/repo/src/nmrezman/phase01/train/general.py``. This notebook can be found in ``/path/to/repo/examples/phase01``."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Load the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here the data is loaded. During Phase 01 development, preprocessing of the data was done beforehand via the code block below. We preprocessed the notes once, saved off the data, and then trained based off that dataframe. In this example, we employ a similar workflow to best match the source code provided.\n",
    "\n",
    "Notably, the preprocessing includes (i) lowercasing the report text, (ii) extracting the \"impression\" / \"findings\" portion of the report based on the keywords in the report, (iii) removing doctor signatures, and (iv) removing any new lines. This general utility is found via ``nmrezman.utils.preprocess_input``. Note, you will likely need to modify this function to best match the formatting of the reports in your hospital network and / or account for extra blank text, new line, etc. introduced by your system / cloud platform(s). \n",
    "\n",
    "```python\n",
    "import os\n",
    "import pandas as pd\n",
    "import joblib\n",
    "from nmrezman import utils\n",
    "\n",
    "base_path = os.path.dirname(\"__file__\")\n",
    "data_path = os.path.abspath(os.path.join(base_path, \"..\", \"demo_data.csv\"))\n",
    "df = pd.read_csv(data_path)\n",
    "df[\"new_note\"] = df[\"note\"].apply(lambda x: utils.preprocess_input(x, is_phase_2=False))\n",
    "joblib.dump(df, os.path.abspath(os.path.join(base_path, \"..\", \"demo_data.gz\")))\n",
    "df.to_csv(os.path.abspath(os.path.join(base_path, \"..\", \"demo_data.csv\")), index=False)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rpt_num</th>\n",
       "      <th>note</th>\n",
       "      <th>selected_finding</th>\n",
       "      <th>selected_proc</th>\n",
       "      <th>selected_label</th>\n",
       "      <th>new_note</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PROCEDURE:  CT CHEST WO CONTRAST. HISTORY:  Wheezing TECHNIQUE:  Non-contrast helical thoracic CT was performed. COMPARISON:  There is no prior chest CT for comparison. FINDINGS:   Support Devices:  None. Heart/Pericardium/Great Vessels:        Cardiac size is normal.      There is no calcific coronary artery atherosclerosis.       There is no pericardial effusion.      The aorta is normal in diameter.      The main pulmonary artery is normal in diameter. Pleural Spaces:  Few small pleural calcifications are present in the right pleura for example on 2/62 and 3/76.  The pleural spaces are otherwise clear. Mediastinum/Hila:  There is no mediastinal or hilar lymph node enlargement.  Subcentimeter minimally calcified paratracheal lymph nodes are likely related to prior granulomas infection. Neck Base/Chest Wall/Diaphragm/Upper Abdomen:  There is no supraclavicular or axillary lymph node enlargement.  Limited, non-contrast imaging through the upper abdomen is within normal limits.  Mild degenerative change is present in the spine. Lungs/Central Airways: There is a 15 mm nodular density in the nondependent aspect of the bronchus intermedius on 2/52.  The trachea and central airways are otherwise clear.  There is mild diffuse bronchial wall thickening.  There is a calcified granuloma in the posterior right upper lobe.  The lungs are otherwise clear. CONCLUSIONS:   1.  There is mild diffuse bronchial wall thickening suggesting small airways disease such as asthma or bronchitis in the appropriate clinical setting. 2.  A 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  A follow-up CT in 6 months might be considered to evaluate the growth. 3.  Stigmata of old granulomatous disease is present. &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>Lung Findings</td>\n",
       "      <td>CT Chest</td>\n",
       "      <td>A 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  A follow-up CT in 6 months might be considered to evaluate the growth.</td>\n",
       "      <td>support devices:  none. heart/pericardium/great vessels:        cardiac size is normal.      there is no calcific coronary artery atherosclerosis.       there is no pericardial effusion.      the aorta is normal in diameter.      the main pulmonary artery is normal in diameter. pleural spaces:  few small pleural calcifications are present in the right pleura for example on 2/62 and 3/76.  the pleural spaces are otherwise clear. mediastinum/hila:  there is no mediastinal or hilar lymph node enlargement.  subcentimeter minimally calcified paratracheal lymph nodes are likely related to prior granulomas infection. neck base/chest wall/diaphragm/upper abdomen:  there is no supraclavicular or axillary lymph node enlargement.  limited, non-contrast imaging through the upper abdomen is within normal limits.  mild degenerative change is present in the spine. lungs/central airways: there is a 15 mm nodular density in the nondependent aspect of the bronchus intermedius on 2/52.  the trachea and central airways are otherwise clear.  there is mild diffuse bronchial wall thickening.  there is a calcified granuloma in the posterior right upper lobe.  the lungs are otherwise clear. conclusions:   1.  there is mild diffuse bronchial wall thickening suggesting small airways disease such as asthma or bronchitis in the appropriate clinical setting. 2.  a 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  a follow-up ct in 6 months might be considered to evaluate the growth. 3.  stigmata of old granulomatous disease is present.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>PROCEDURE:  CT ABDOMEN PELVIS W CONTRAST COMPARISON:  date INDICATIONS:  Lower abdominal/flank pain on the right TECHNIQUE:     After obtaining the patients consent, CT images were created with intravenous iodinated contrast.  FINDINGS:   LIVER:   The liver is normal in size.  No suspicious liver lesion is seen. The portal and hepatic veins are patent. BILIARY:   No biliary duct dilation. The biliary system is otherwise unremarkable. PANCREAS:   No focal pancreatic lesion.  No pancreatic duct dilation. SPLEEN:   No suspicious splenic lesion is seen. The spleen is normal in size. KIDNEYS:   No suspicious renal lesion is seen.  No hydronephrosis. ADRENALS:   No adrenal gland nodule or thickening.  AORTA/VASCULAR:   No aneurysm. RETROPERITONEUM:   No lymphadenopathy. BOWEL/MESENTERY:   The appendix is normal.  No bowel wall thickening or bowel dilation. ABDOMINAL WALL:   No hernia. URINARY BLADDER:   Incomplete bladder distension limits evaluation, but no focal wall thickening or calculus is seen. PELVIC NODES:   No lymphadenopathy.  PELVIC ORGANS:   Status post hysterectomy.  No pelvic mass. BONES:   No acute fracture or suspicious osseous lesion. LUNG BASES:   No pleural effusion or consolidation. OTHER:   Small hiatal hernia. CONCLUSION:   1.  No acute process is detected. 2.  Small hiatal hernia &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>No Findings</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No label</td>\n",
       "      <td>liver:   the liver is normal in size.  no suspicious liver lesion is seen. the portal and hepatic veins are patent. biliary:   no biliary duct dilation. the biliary system is otherwise unremarkable. pancreas:   no focal pancreatic lesion.  no pancreatic duct dilation. spleen:   no suspicious splenic lesion is seen. the spleen is normal in size. kidneys:   no suspicious renal lesion is seen.  no hydronephrosis. adrenals:   no adrenal gland nodule or thickening.  aorta/vascular:   no aneurysm. retroperitoneum:   no lymphadenopathy. bowel/mesentery:   the appendix is normal.  no bowel wall thickening or bowel dilation. abdominal wall:   no hernia. urinary bladder:   incomplete bladder distension limits evaluation, but no focal wall thickening or calculus is seen. pelvic nodes:   no lymphadenopathy.  pelvic organs:   status post hysterectomy.  no pelvic mass. bones:   no acute fracture or suspicious osseous lesion. lung bases:   no pleural effusion or consolidation. other:   small hiatal hernia. conclusion:   1.  no acute process is detected. 2.  small hiatal hernia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>EXAM:  MRI ABDOMEN W WO CONTRAST CLINICAL INDICATION:  Cirrhosis of liver without ascites, unspecified hepatic cirrhosis type (CMS-HCC) TECHNIQUE: MRI of the abdomen was performed with and without contrast. Multiplanar imaging was performed.  8.5  cc of Gadavist was administered. COMPARISON:  DATE and priors FINDINGS:   On limited views of the lung bases, no acute abnormality is noted. There may be mild distal esophageal wall thickening. On the out of phase series, there is suggestion of some signal gain within the hepatic parenchyma. This is stable. A tiny cystic nonenhancing focus is seen anteriorly in the right hepatic lobe (9/10), unchanged. A subtly micronodular hepatic periphery is noted. There are few subtle hypervascular lesions in the right hepatic lobe, without significant washout. The portal vein is patent. Some splenorenal shunting is redemonstrated, similar to the comparison exam. The spleen measures 12.4 cm in length. No focal splenic lesion is appreciated. There are several small renal lesions again seen, many of which again demonstrate T1 shortening. On the postcontrast subtraction series, no obvious enhancement is noted. The adrenal glands and pancreas are intact. There is mild cholelithiasis, without gallbladder wall thickening or pericholecystic fluid. No free abdominal fluid is visualized. IMPRESSION:   1. Stable cirrhotic appearance of the liver. Few subtly hypervascular hepatic lesions do not demonstrate washout, and probably relate to perfusion variants. No particularly suspicious hepatic mass is seen. 2. Mild splenomegaly to 12.4 cm redemonstrated. Splenorenal shunting is again seen. 3. Scattered simple and complex renal cystic lesions, nonenhancing, stable from March 2040. 4. Incidentally, there is evidence of signal gain in the liver on the out of phase series. This occasionally may represent iron overload.  &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>No Findings</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No label</td>\n",
       "      <td>on limited views of the lung bases, no acute abnormality is noted. there may be mild distal esophageal wall thickening. on the out of phase series, there is suggestion of some signal gain within the hepatic parenchyma. this is stable. a tiny cystic nonenhancing focus is seen anteriorly in the right hepatic lobe (9/10), unchanged. a subtly micronodular hepatic periphery is noted. there are few subtle hypervascular lesions in the right hepatic lobe, without significant washout. the portal vein is patent. some splenorenal shunting is redemonstrated, similar to the comparison exam. the spleen measures 12.4 cm in length. no focal splenic lesion is appreciated. there are several small renal lesions again seen, many of which again demonstrate t1 shortening. on the postcontrast subtraction series, no obvious enhancement is noted. the adrenal glands and pancreas are intact. there is mild cholelithiasis, without gallbladder wall thickening or pericholecystic fluid. no free abdominal fluid is visualized. impression:   1. stable cirrhotic appearance of the liver. few subtly hypervascular hepatic lesions do not demonstrate washout, and probably relate to perfusion variants. no particularly suspicious hepatic mass is seen. 2. mild splenomegaly to 12.4 cm redemonstrated. splenorenal shunting is again seen. 3. scattered simple and complex renal cystic lesions, nonenhancing, stable from march 2040. 4. incidentally, there is evidence of signal gain in the liver on the out of phase series. this occasionally may represent iron overload.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import joblib\n",
    "from IPython.display import display, HTML\n",
    "\n",
    "# Define the path to the data\n",
    "base_path = os.path.dirname(\"__file__\")\n",
    "data_path = os.path.abspath(os.path.join(base_path, \"..\", \"demo_data.gz\"))\n",
    "\n",
    "# Import data\n",
    "# NOTE: this data has already been preprocessed, extracting the findings, removing Dr signature, etc.\n",
    "# See `from ..utils import preprocess_input`\n",
    "modeling_df = joblib.load(data_path)\n",
    "\n",
    "# Get preprocessed notes and labels (X and y)\n",
    "X = modeling_df[\"new_note\"]\n",
    "labels = [0 if i == \"No Findings\" else 1 for i in modeling_df[\"selected_finding\"]]\n",
    "\n",
    "display(HTML(modeling_df.head(3).to_html()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Model Constants"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "Next, we define some constants that will help parameterize our model. The numbers can be tuned to your specific application. The ``max_sequence_length`` represents the max length of the reports. In general, we found that the impression section of the NM radiology reports were about ~250 in length, so this was set to ``300``. The ``max_num_words`` represent the max number of words in the vocab to start with. Ultimately, the model will use the actual vocab size for training. Lastly, ``glove_embedding_dim`` is the dimension (hyperparameter) of the word embedding as defined by the GloVe word vector. Unless you use one of their other embeddings, this number stays the same; regardless, it should match the downloaded GloVe word vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define model constants\n",
    "max_sequence_length = 300       # Max length of report. Avg NM is ~250\n",
    "max_num_words = 15000           # Max number of words for vocab\n",
    "glove_embedding_dim = 300       # GloVe embedding dimension size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tokenize the Data using a GloVe Embedding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using a Keras tokenizer object, we define the tokenizer based on the whole text where each word is assigned a unique number and every word is associated with a number. We add basic filtering to remove special characters from getting assigned a value and lowercase all the text to prevent capitalization variations generating new tokens (e.g., \"lung\" vs \"Lung\" being assigned different tokens). \n",
    "\n",
    "Padding is used so that all reports are the same length. In this case, we prepad since we generally found the--for NM reports--the radiology findings and follow-up recommendations were found in the last section of the report. So, if a report is greater than our defined `max_sequence_length` (`300`), it will truncated the text; however, if the report is shorter, the tokenizer will add 0 values (i.e., a placeholder token) at the beginning of the text.\n",
    "\n",
    "Lastly, we calculate the ``vocab_size``--the number of words in the token vector--to give to the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 545 unique tokens.\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.text import Tokenizer\n",
    "from keras.preprocessing.sequence import pad_sequences\n",
    "\n",
    "# Define the tokenizer\n",
    "# Lowercase the text; filter out special characters \n",
    "tokenizer = Tokenizer(num_words=max_num_words, filters='!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~', lower=True)\n",
    "tokenizer.fit_on_texts(X)\n",
    "word_index = tokenizer.word_index\n",
    "vocab_size = len(word_index)+1\n",
    "\n",
    "# Tokenize the notes\n",
    "# Prepend since radiology fidings are almost always located in the last section of the report\n",
    "X_tokenized = tokenizer.texts_to_sequences(X)\n",
    "X_tokenized = pad_sequences(X_tokenized, maxlen=max_sequence_length, padding=\"pre\")\n",
    "\n",
    "print('Found %s unique tokens.' % len(word_index))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For setting up GloVe embedding matrix, first we download the 300 dimension GloVe embedding file `glove.6B.300d.txt` (see [the GloVe project website](https://nlp.stanford.edu/projects/glove/)). Do this by either manually downloading and extracting the embeddings from the [.zip source](https://nlp.stanford.edu/data/glove.6B.zip) into the workspace, or by running the following `wget` command in your cli:\n",
    "```shell\n",
    "wget \"https://nlp.stanford.edu/data/glove.6B.zip\" -O /tmp/temp.zip\n",
    "unzip /tmp/temp.zip glove.6B.300d.txt -d /workspace/data\n",
    "rm /tmp/temp.zip\n",
    "```\n",
    "\n",
    "Next, create an embedding vector that will have keys as words present in the GloVe embedding file with its value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Data path to the pre-downloaded Stanford pretrained word vectors\n",
    "# TODO: update this path to your local location of GloVe Stanford pretrained word vectors `glove.6B.300d`\n",
    "glove_embedding_path = \"/path/to/data/glove.6B.300d.txt\"\n",
    "\n",
    "# Get GloVe embedding matrix\n",
    "# NOTE: Stanford pretrained word vectors glove.6B.300d were downloaded from https://nlp.stanford.edu/projects/glove/\n",
    "glove_embeddings_index = {}\n",
    "f = open(glove_embedding_path, encoding=\"utf8\")\n",
    "for line in f:\n",
    "    values = line.split()\n",
    "    word = values[0]\n",
    "    try:\n",
    "        coefs = np.asarray(values[1:], dtype=\"float32\")\n",
    "    except:\n",
    "        pass\n",
    "    glove_embeddings_index[word] = coefs\n",
    "f.close()\n",
    "\n",
    "glove_embedding_matrix = np.random.random((len(word_index) + 1, glove_embedding_dim))\n",
    "for word, i in word_index.items():\n",
    "    glove_embedding_vector = glove_embeddings_index.get(word)\n",
    "    if glove_embedding_vector is not None:\n",
    "            # words not found in embedding index will be all-zeros.\n",
    "            if len(glove_embedding_matrix[i]) != len(glove_embedding_vector):\n",
    "                print(\"could not broadcast input array from shape\", str(len(glove_embedding_matrix[i])),\n",
    "                    \"into shape\", str(len(glove_embedding_vector)), \" Please make sure your\"\n",
    "                                                                \" EMBEDDING_DIM is equal to embedding_vector file ,GloVe,\")\n",
    "                exit(1)\n",
    "            glove_embedding_matrix[i] = glove_embedding_vector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we define the model, which, in this case, is a stacked biLSTM model. We use the Tensorflow and Keras libraries to define this custom model. These layers can be modified as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-03-07 23:48:42.157710: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-03-07 23:48:42.915489: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1525] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 14635 MB memory:  -> device: 0, name: Tesla V100-PCIE-16GB, pci bus id: 0001:00:00.0, compute capability: 7.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       (None, 300, 300)          163800    \n",
      "                                                                 \n",
      " spatial_dropout1d (SpatialD  (None, 300, 300)         0         \n",
      " ropout1D)                                                       \n",
      "                                                                 \n",
      " bidirectional (Bidirectiona  (None, 300, 400)         801600    \n",
      " l)                                                              \n",
      "                                                                 \n",
      " bidirectional_1 (Bidirectio  (None, 300, 400)         961600    \n",
      " nal)                                                            \n",
      "                                                                 \n",
      " bidirectional_2 (Bidirectio  (None, 400)              961600    \n",
      " nal)                                                            \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 400)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 12)                4812      \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 2)                 26        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2,893,438\n",
      "Trainable params: 2,729,638\n",
      "Non-trainable params: 163,800\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Embedding, SpatialDropout1D, Bidirectional, LSTM\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size,\n",
    "                    glove_embedding_dim,\n",
    "                    weights=[glove_embedding_matrix],\n",
    "                    input_length=max_sequence_length,\n",
    "                    trainable=False),\n",
    ")\n",
    "model.add(SpatialDropout1D(0.25))\n",
    "model.add(Bidirectional(LSTM(200, return_sequences=True)))\n",
    "model.add(Bidirectional(LSTM(200, return_sequences=True)))\n",
    "model.add(Bidirectional(LSTM(200)))\n",
    "model.add(Dropout(0.1))\n",
    "model.add(Dense(12))\n",
    "model.add(Dense(units=2, activation=\"softmax\"))\n",
    "adam = Adam(learning_rate=0.0011)\n",
    "model.compile(loss=\"categorical_crossentropy\", optimizer=adam, metrics=[\"accuracy\"])\n",
    "\n",
    "model.summary(expand_nested=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Training Process"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we split the data into an 80/20 train and test sets. Note that a different random state is used here (vs the source code) to suit this small sample dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the data into train and test\n",
    "train_x, valid_x, train_y, valid_y = train_test_split(X_tokenized, labels, test_size=0.20, random_state=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we define directories and output file names. These locations will be were our final, best trained model live once training is complete. Once trained, these model weights can be used to classify new reports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_checkpoint_name = \"/path/to/results/phase01/demo/findings/findings_best_model.h5\"\n",
    "result_fname = \"/path/to/results/phase01/demo/findings/findings_best_result.log\"\n",
    "\n",
    "# Make dirs to save results\n",
    "os.makedirs(os.path.dirname(model_checkpoint_name), exist_ok=True)\n",
    "os.makedirs(os.path.dirname(result_fname), exist_ok=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it's time to train! Keras does a lot of the heavy lifting here. We add some callbacks to stop early based on if the validation loss continues to decrease. Additionally, we only save the best checkpoint since we only care about saving the model with the best performance. The model will be trained for upwards of 100 epochs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-03-07 23:48:52.718937: I tensorflow/stream_executor/cuda/cuda_dnn.cc:366] Loaded cuDNN version 8204\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - ETA: 0s - loss: 0.6717 - accuracy: 0.6250\n",
      "Epoch 00001: val_loss improved from inf to 0.78142, saving model to /path/to/results/phase01/demo/findings/findings_best_model.h5\n",
      "1/1 [==============================] - 11s 11s/step - loss: 0.6717 - accuracy: 0.6250 - val_loss: 0.7814 - val_accuracy: 0.3333\n",
      "Epoch 2/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.5393 - accuracy: 0.7500\n",
      "Epoch 00002: val_loss did not improve from 0.78142\n",
      "1/1 [==============================] - 0s 127ms/step - loss: 0.5393 - accuracy: 0.7500 - val_loss: 0.9052 - val_accuracy: 0.6667\n",
      "Epoch 3/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.7345 - accuracy: 0.6250\n",
      "Epoch 00003: val_loss did not improve from 0.78142\n",
      "1/1 [==============================] - 0s 123ms/step - loss: 0.7345 - accuracy: 0.6250 - val_loss: 0.9365 - val_accuracy: 0.3333\n",
      "Epoch 4/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.3943 - accuracy: 0.7500\n",
      "Epoch 00004: val_loss did not improve from 0.78142\n",
      "1/1 [==============================] - 0s 116ms/step - loss: 0.3943 - accuracy: 0.7500 - val_loss: 0.9092 - val_accuracy: 0.3333\n",
      "Epoch 5/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.4060 - accuracy: 0.7500\n",
      "Epoch 00005: val_loss improved from 0.78142 to 0.53731, saving model to /path/to/results/phase01/demo/findings/findings_best_model.h5\n",
      "1/1 [==============================] - 0s 245ms/step - loss: 0.4060 - accuracy: 0.7500 - val_loss: 0.5373 - val_accuracy: 0.6667\n",
      "Epoch 6/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.2056 - accuracy: 1.0000\n",
      "Epoch 00006: val_loss did not improve from 0.53731\n",
      "1/1 [==============================] - 0s 116ms/step - loss: 0.2056 - accuracy: 1.0000 - val_loss: 0.6331 - val_accuracy: 0.6667\n",
      "Epoch 7/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.2440 - accuracy: 0.8750\n",
      "Epoch 00007: val_loss improved from 0.53731 to 0.42821, saving model to /path/to/results/phase01/demo/findings/findings_best_model.h5\n",
      "1/1 [==============================] - 0s 219ms/step - loss: 0.2440 - accuracy: 0.8750 - val_loss: 0.4282 - val_accuracy: 0.6667\n",
      "Epoch 8/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0470 - accuracy: 1.0000\n",
      "Epoch 00008: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 113ms/step - loss: 0.0470 - accuracy: 1.0000 - val_loss: 0.5175 - val_accuracy: 0.6667\n",
      "Epoch 9/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0264 - accuracy: 1.0000\n",
      "Epoch 00009: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 117ms/step - loss: 0.0264 - accuracy: 1.0000 - val_loss: 1.1193 - val_accuracy: 0.6667\n",
      "Epoch 10/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0244 - accuracy: 1.0000\n",
      "Epoch 00010: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 116ms/step - loss: 0.0244 - accuracy: 1.0000 - val_loss: 1.3914 - val_accuracy: 0.3333\n",
      "Epoch 11/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0069 - accuracy: 1.0000\n",
      "Epoch 00011: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 111ms/step - loss: 0.0069 - accuracy: 1.0000 - val_loss: 1.5533 - val_accuracy: 0.3333\n",
      "Epoch 12/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0034 - accuracy: 1.0000\n",
      "Epoch 00012: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 114ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 1.5892 - val_accuracy: 0.6667\n",
      "Epoch 13/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0054 - accuracy: 1.0000\n",
      "Epoch 00013: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 114ms/step - loss: 0.0054 - accuracy: 1.0000 - val_loss: 1.2127 - val_accuracy: 0.6667\n",
      "Epoch 14/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0013 - accuracy: 1.0000\n",
      "Epoch 00014: val_loss did not improve from 0.42821\n",
      "1/1 [==============================] - 0s 118ms/step - loss: 0.0013 - accuracy: 1.0000 - val_loss: 0.7344 - val_accuracy: 0.6667\n",
      "Epoch 15/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 0.0012 - accuracy: 1.0000\n",
      "Epoch 00015: val_loss improved from 0.42821 to 0.29115, saving model to /path/to/results/phase01/demo/findings/findings_best_model.h5\n",
      "1/1 [==============================] - 0s 229ms/step - loss: 0.0012 - accuracy: 1.0000 - val_loss: 0.2912 - val_accuracy: 0.6667\n",
      "Epoch 16/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 7.6486e-04 - accuracy: 1.0000\n",
      "Epoch 00016: val_loss improved from 0.29115 to 0.12271, saving model to /path/to/results/phase01/demo/findings/findings_best_model.h5\n",
      "1/1 [==============================] - 0s 221ms/step - loss: 7.6486e-04 - accuracy: 1.0000 - val_loss: 0.1227 - val_accuracy: 1.0000\n",
      "Epoch 17/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 5.9440e-04 - accuracy: 1.0000\n",
      "Epoch 00017: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 113ms/step - loss: 5.9440e-04 - accuracy: 1.0000 - val_loss: 0.3862 - val_accuracy: 0.6667\n",
      "Epoch 18/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 6.6654e-04 - accuracy: 1.0000\n",
      "Epoch 00018: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 118ms/step - loss: 6.6654e-04 - accuracy: 1.0000 - val_loss: 0.9521 - val_accuracy: 0.6667\n",
      "Epoch 19/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 3.7514e-04 - accuracy: 1.0000\n",
      "Epoch 00019: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 117ms/step - loss: 3.7514e-04 - accuracy: 1.0000 - val_loss: 1.4473 - val_accuracy: 0.6667\n",
      "Epoch 20/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 3.6986e-04 - accuracy: 1.0000\n",
      "Epoch 00020: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 115ms/step - loss: 3.6986e-04 - accuracy: 1.0000 - val_loss: 1.8139 - val_accuracy: 0.6667\n",
      "Epoch 21/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 3.2677e-04 - accuracy: 1.0000\n",
      "Epoch 00021: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 117ms/step - loss: 3.2677e-04 - accuracy: 1.0000 - val_loss: 2.0806 - val_accuracy: 0.6667\n",
      "Epoch 22/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 2.0694e-04 - accuracy: 1.0000\n",
      "Epoch 00022: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 118ms/step - loss: 2.0694e-04 - accuracy: 1.0000 - val_loss: 2.2770 - val_accuracy: 0.6667\n",
      "Epoch 23/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 1.7372e-04 - accuracy: 1.0000\n",
      "Epoch 00023: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 122ms/step - loss: 1.7372e-04 - accuracy: 1.0000 - val_loss: 2.4248 - val_accuracy: 0.6667\n",
      "Epoch 24/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 1.7007e-04 - accuracy: 1.0000\n",
      "Epoch 00024: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 117ms/step - loss: 1.7007e-04 - accuracy: 1.0000 - val_loss: 2.5394 - val_accuracy: 0.6667\n",
      "Epoch 25/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 1.7452e-04 - accuracy: 1.0000\n",
      "Epoch 00025: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 112ms/step - loss: 1.7452e-04 - accuracy: 1.0000 - val_loss: 2.6312 - val_accuracy: 0.6667\n",
      "Epoch 26/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 1.3593e-04 - accuracy: 1.0000\n",
      "Epoch 00026: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 115ms/step - loss: 1.3593e-04 - accuracy: 1.0000 - val_loss: 2.7067 - val_accuracy: 0.6667\n",
      "Epoch 27/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 1.3290e-04 - accuracy: 1.0000\n",
      "Epoch 00027: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 115ms/step - loss: 1.3290e-04 - accuracy: 1.0000 - val_loss: 2.7706 - val_accuracy: 0.6667\n",
      "Epoch 28/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 9.7877e-05 - accuracy: 1.0000\n",
      "Epoch 00028: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 114ms/step - loss: 9.7877e-05 - accuracy: 1.0000 - val_loss: 2.8258 - val_accuracy: 0.6667\n",
      "Epoch 29/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 9.9574e-05 - accuracy: 1.0000\n",
      "Epoch 00029: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 117ms/step - loss: 9.9574e-05 - accuracy: 1.0000 - val_loss: 2.8743 - val_accuracy: 0.6667\n",
      "Epoch 30/30\n",
      "1/1 [==============================] - ETA: 0s - loss: 6.7379e-05 - accuracy: 1.0000\n",
      "Epoch 00030: val_loss did not improve from 0.12271\n",
      "1/1 [==============================] - 0s 113ms/step - loss: 6.7379e-05 - accuracy: 1.0000 - val_loss: 2.9174 - val_accuracy: 0.6667\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f4c14f29370>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import keras.backend as K\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "\n",
    "# Clear the Keras backend\n",
    "K.clear_session()\n",
    "\n",
    "# Train!\n",
    "es = EarlyStopping(monitor=\"val_loss\", mode=\"min\", verbose=1, patience=15,)\n",
    "mc = ModelCheckpoint(model_checkpoint_name, monitor=\"val_loss\", mode=\"min\", verbose=1, save_best_only=True,)\n",
    "model.fit(\n",
    "    train_x,\n",
    "    to_categorical(train_y),\n",
    "    epochs=30,\n",
    "    batch_size=100,\n",
    "    callbacks=[es, mc],\n",
    "    verbose=1,\n",
    "    validation_data=(valid_x, to_categorical(valid_y)),\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate the Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using `sklearn`'s ``classification_report`` and ``confusion_matrix``, we can evaluate how well the model performs on the test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         2\n",
      "           1       1.00      1.00      1.00         1\n",
      "\n",
      "    accuracy                           1.00         3\n",
      "   macro avg       1.00      1.00      1.00         3\n",
      "weighted avg       1.00      1.00      1.00         3\n",
      "\n",
      "[[2 0]\n",
      " [0 1]]\n"
     ]
    }
   ],
   "source": [
    "from keras.models import load_model\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Load in the best model\n",
    "best_model = load_model(model_checkpoint_name)\n",
    "\n",
    "# Perform confusion matrix and save the results\n",
    "y_pred = best_model.predict(np.array(valid_x))\n",
    "y_pred = np.argmax(y_pred, axis=1)\n",
    "report = classification_report(valid_y, y_pred)\n",
    "matrix = confusion_matrix(valid_y, y_pred)\n",
    "print(report)\n",
    "print(matrix)\n",
    "with open(result_fname, \"w\") as fh:\n",
    "    fh.write(\"Classification Report:\\n\")\n",
    "    fh.write(report)\n",
    "    fh.write(\"\\n\\nConfusion Matrix:\\n\")\n",
    "    fh.write(np.array2string(matrix, separator=\", \"))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}