{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c2730c6f",
   "metadata": {},
   "source": [
    "# Demo: Pretraining the NM Results Management Language Model with Custom Corpus"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04028ff3",
   "metadata": {},
   "source": [
    "For Masked Language Modeling (MLM), we randomly mask some tokens by replacing them by ``[MASK]``, and then the labels are adjusted to only include masked tokens. In this example, we use a sample of ten radiology reports to pretrain from an initial RoBERTa checkpoint."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a737d83a",
   "metadata": {},
   "source": [
    "## Load the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c62ce1c4",
   "metadata": {},
   "source": [
    "First, the data is loaded. For pretraining, we are only concerned with the radiology report. We will pretrain the model to predict masked words in the report."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4b404f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rpt_num</th>\n",
       "      <th>note</th>\n",
       "      <th>selected_finding</th>\n",
       "      <th>selected_proc</th>\n",
       "      <th>selected_label</th>\n",
       "      <th>new_note</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PROCEDURE:  CT CHEST WO CONTRAST. HISTORY:  Wheezing TECHNIQUE:  Non-contrast helical thoracic CT was performed. COMPARISON:  There is no prior chest CT for comparison. FINDINGS:   Support Devices:  None. Heart/Pericardium/Great Vessels:        Cardiac size is normal.      There is no calcific coronary artery atherosclerosis.       There is no pericardial effusion.      The aorta is normal in diameter.      The main pulmonary artery is normal in diameter. Pleural Spaces:  Few small pleural calcifications are present in the right pleura for example on 2/62 and 3/76.  The pleural spaces are otherwise clear. Mediastinum/Hila:  There is no mediastinal or hilar lymph node enlargement.  Subcentimeter minimally calcified paratracheal lymph nodes are likely related to prior granulomas infection. Neck Base/Chest Wall/Diaphragm/Upper Abdomen:  There is no supraclavicular or axillary lymph node enlargement.  Limited, non-contrast imaging through the upper abdomen is within normal limits.  Mild degenerative change is present in the spine. Lungs/Central Airways: There is a 15 mm nodular density in the nondependent aspect of the bronchus intermedius on 2/52.  The trachea and central airways are otherwise clear.  There is mild diffuse bronchial wall thickening.  There is a calcified granuloma in the posterior right upper lobe.  The lungs are otherwise clear. CONCLUSIONS:   1.  There is mild diffuse bronchial wall thickening suggesting small airways disease such as asthma or bronchitis in the appropriate clinical setting. 2.  A 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  A follow-up CT in 6 months might be considered to evaluate the growth. 3.  Stigmata of old granulomatous disease is present. &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>Lung Findings</td>\n",
       "      <td>CT Chest</td>\n",
       "      <td>A 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  A follow-up CT in 6 months might be considered to evaluate the growth.</td>\n",
       "      <td>support devices:  none. heart/pericardium/great vessels:        cardiac size is normal.      there is no calcific coronary artery atherosclerosis.       there is no pericardial effusion.      the aorta is normal in diameter.      the main pulmonary artery is normal in diameter. pleural spaces:  few small pleural calcifications are present in the right pleura for example on 2/62 and 3/76.  the pleural spaces are otherwise clear. mediastinum/hila:  there is no mediastinal or hilar lymph node enlargement.  subcentimeter minimally calcified paratracheal lymph nodes are likely related to prior granulomas infection. neck base/chest wall/diaphragm/upper abdomen:  there is no supraclavicular or axillary lymph node enlargement.  limited, non-contrast imaging through the upper abdomen is within normal limits.  mild degenerative change is present in the spine. lungs/central airways: there is a 15 mm nodular density in the nondependent aspect of the bronchus intermedius on 2/52.  the trachea and central airways are otherwise clear.  there is mild diffuse bronchial wall thickening.  there is a calcified granuloma in the posterior right upper lobe.  the lungs are otherwise clear. conclusions:   1.  there is mild diffuse bronchial wall thickening suggesting small airways disease such as asthma or bronchitis in the appropriate clinical setting. 2.  a 3 mm nodular soft tissue attenuation in the nondependent aspect of the right bronchus intermedius is nonspecific, which could be mucus or abnormal soft tissue.  a follow-up ct in 6 months might be considered to evaluate the growth. 3.  stigmata of old granulomatous disease is present.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>PROCEDURE:  CT ABDOMEN PELVIS W CONTRAST COMPARISON:  date INDICATIONS:  Lower abdominal/flank pain on the right TECHNIQUE:     After obtaining the patients consent, CT images were created with intravenous iodinated contrast.  FINDINGS:   LIVER:   The liver is normal in size.  No suspicious liver lesion is seen. The portal and hepatic veins are patent. BILIARY:   No biliary duct dilation. The biliary system is otherwise unremarkable. PANCREAS:   No focal pancreatic lesion.  No pancreatic duct dilation. SPLEEN:   No suspicious splenic lesion is seen. The spleen is normal in size. KIDNEYS:   No suspicious renal lesion is seen.  No hydronephrosis. ADRENALS:   No adrenal gland nodule or thickening.  AORTA/VASCULAR:   No aneurysm. RETROPERITONEUM:   No lymphadenopathy. BOWEL/MESENTERY:   The appendix is normal.  No bowel wall thickening or bowel dilation. ABDOMINAL WALL:   No hernia. URINARY BLADDER:   Incomplete bladder distension limits evaluation, but no focal wall thickening or calculus is seen. PELVIC NODES:   No lymphadenopathy.  PELVIC ORGANS:   Status post hysterectomy.  No pelvic mass. BONES:   No acute fracture or suspicious osseous lesion. LUNG BASES:   No pleural effusion or consolidation. OTHER:   Small hiatal hernia. CONCLUSION:   1.  No acute process is detected. 2.  Small hiatal hernia &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>No Findings</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No label</td>\n",
       "      <td>liver:   the liver is normal in size.  no suspicious liver lesion is seen. the portal and hepatic veins are patent. biliary:   no biliary duct dilation. the biliary system is otherwise unremarkable. pancreas:   no focal pancreatic lesion.  no pancreatic duct dilation. spleen:   no suspicious splenic lesion is seen. the spleen is normal in size. kidneys:   no suspicious renal lesion is seen.  no hydronephrosis. adrenals:   no adrenal gland nodule or thickening.  aorta/vascular:   no aneurysm. retroperitoneum:   no lymphadenopathy. bowel/mesentery:   the appendix is normal.  no bowel wall thickening or bowel dilation. abdominal wall:   no hernia. urinary bladder:   incomplete bladder distension limits evaluation, but no focal wall thickening or calculus is seen. pelvic nodes:   no lymphadenopathy.  pelvic organs:   status post hysterectomy.  no pelvic mass. bones:   no acute fracture or suspicious osseous lesion. lung bases:   no pleural effusion or consolidation. other:   small hiatal hernia. conclusion:   1.  no acute process is detected. 2.  small hiatal hernia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>EXAM:  MRI ABDOMEN W WO CONTRAST CLINICAL INDICATION:  Cirrhosis of liver without ascites, unspecified hepatic cirrhosis type (CMS-HCC) TECHNIQUE: MRI of the abdomen was performed with and without contrast. Multiplanar imaging was performed.  8.5  cc of Gadavist was administered. COMPARISON:  DATE and priors FINDINGS:   On limited views of the lung bases, no acute abnormality is noted. There may be mild distal esophageal wall thickening. On the out of phase series, there is suggestion of some signal gain within the hepatic parenchyma. This is stable. A tiny cystic nonenhancing focus is seen anteriorly in the right hepatic lobe (9/10), unchanged. A subtly micronodular hepatic periphery is noted. There are few subtle hypervascular lesions in the right hepatic lobe, without significant washout. The portal vein is patent. Some splenorenal shunting is redemonstrated, similar to the comparison exam. The spleen measures 12.4 cm in length. No focal splenic lesion is appreciated. There are several small renal lesions again seen, many of which again demonstrate T1 shortening. On the postcontrast subtraction series, no obvious enhancement is noted. The adrenal glands and pancreas are intact. There is mild cholelithiasis, without gallbladder wall thickening or pericholecystic fluid. No free abdominal fluid is visualized. IMPRESSION:   1. Stable cirrhotic appearance of the liver. Few subtly hypervascular hepatic lesions do not demonstrate washout, and probably relate to perfusion variants. No particularly suspicious hepatic mass is seen. 2. Mild splenomegaly to 12.4 cm redemonstrated. Splenorenal shunting is again seen. 3. Scattered simple and complex renal cystic lesions, nonenhancing, stable from March 2040. 4. Incidentally, there is evidence of signal gain in the liver on the out of phase series. This occasionally may represent iron overload.  &amp;#x20; FINAL REPORT Attending Radiologist:</td>\n",
       "      <td>No Findings</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No label</td>\n",
       "      <td>on limited views of the lung bases, no acute abnormality is noted. there may be mild distal esophageal wall thickening. on the out of phase series, there is suggestion of some signal gain within the hepatic parenchyma. this is stable. a tiny cystic nonenhancing focus is seen anteriorly in the right hepatic lobe (9/10), unchanged. a subtly micronodular hepatic periphery is noted. there are few subtle hypervascular lesions in the right hepatic lobe, without significant washout. the portal vein is patent. some splenorenal shunting is redemonstrated, similar to the comparison exam. the spleen measures 12.4 cm in length. no focal splenic lesion is appreciated. there are several small renal lesions again seen, many of which again demonstrate t1 shortening. on the postcontrast subtraction series, no obvious enhancement is noted. the adrenal glands and pancreas are intact. there is mild cholelithiasis, without gallbladder wall thickening or pericholecystic fluid. no free abdominal fluid is visualized. impression:   1. stable cirrhotic appearance of the liver. few subtly hypervascular hepatic lesions do not demonstrate washout, and probably relate to perfusion variants. no particularly suspicious hepatic mass is seen. 2. mild splenomegaly to 12.4 cm redemonstrated. splenorenal shunting is again seen. 3. scattered simple and complex renal cystic lesions, nonenhancing, stable from march 2040. 4. incidentally, there is evidence of signal gain in the liver on the out of phase series. this occasionally may represent iron overload.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import joblib\n",
    "from IPython.display import display, HTML\n",
    "\n",
    "# Define the path to the data\n",
    "base_path = os.path.dirname(\"__file__\")\n",
    "data_path = os.path.abspath(os.path.join(base_path, \"..\", \"demo_data.gz\"))\n",
    "\n",
    "# Import data\n",
    "modeling_df = joblib.load(data_path)\n",
    "\n",
    "display(HTML(modeling_df.head(3).to_html()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c0e414",
   "metadata": {},
   "source": [
    "## Preprocess the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9075012",
   "metadata": {},
   "source": [
    "First, the impression (i.e., the findings / conclusions section) of the report is extracted, any doctor signatures are removed, and the report lowercased. This preprocessing section may need to be modified to accommodate your healthcare system's reports, formatting, etc. The ``preprocess_note`` function is modified from ``nmrezman.utils.preprocess_input``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0bbeef17",
   "metadata": {},
   "outputs": [],
   "source": [
    "def keyword_split(x, keywords, return_idx: int=2):\n",
    "    \"\"\"\n",
    "    Extract portion of string given a list of possible delimiters (keywords) via partition method\n",
    "    \"\"\"\n",
    "    for keyword in keywords:\n",
    "        if x.partition(keyword)[2] !='':\n",
    "            return x.partition(keyword)[return_idx]\n",
    "    return x\n",
    "    \n",
    "def preprocess_note(note):\n",
    "    \"\"\"\n",
    "    Get the impression from the note, remove doctor signature, and lowercase\n",
    "    \"\"\"\n",
    "    impression_keywords = [\n",
    "            \"impression:\",\n",
    "            \"conclusion(s):\",\n",
    "            \"conclusions:\",\n",
    "            \"conclusion:\",\n",
    "            \"finding:\",\n",
    "            \"findings:\",\n",
    "    ]\n",
    "    signature_keywords = [\n",
    "        \"&#x20\",\n",
    "        \"final report attending radiologist:\",\n",
    "    ]\n",
    "    impressions = keyword_split(str(note).lower(), impression_keywords)\n",
    "    impressions = keyword_split(impressions, signature_keywords, return_idx=0)\n",
    "    return impressions\n",
    "\n",
    "# Preprocess the note\n",
    "modeling_df[\"impression\"] = modeling_df[\"note\"].apply(preprocess_note)\n",
    "modeling_df = modeling_df[modeling_df[\"impression\"].notnull()]\n",
    "modeling_df[\"impression\"] = modeling_df[\"impression\"].apply(lambda x: str(x.encode('utf-8')) +\"\\n\"+\"\\n\")    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c4c74bf",
   "metadata": {},
   "source": [
    "Next, the dataset is split into train and test sets, reserving 20% for the test set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "284a1255",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split into train and test data\n",
    "train, test = train_test_split(modeling_df, test_size=0.2, random_state=7867)\n",
    "train = train.reset_index()\n",
    "test = test.reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5854c1b9",
   "metadata": {},
   "source": [
    "The data is then put into 🤗 ``Datasets`` to be used with the 🤗 ``Trainer``. This allows the ``Trainer`` function to extract data and labels from easily."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b8d6db79",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datasets import Dataset, DatasetDict\n",
    "\n",
    "# Import the data into a dataset\n",
    "train_dataset = Dataset.from_pandas(train[\"impression\"].to_frame())\n",
    "test_dataset = Dataset.from_pandas(test[\"impression\"].to_frame())\n",
    "dataset = DatasetDict({\"train\": train_dataset, \"test\": test_dataset})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeaf0b7c",
   "metadata": {},
   "source": [
    "## Tokenize the Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a26f8139",
   "metadata": {},
   "source": [
    "First, we define a tokenizer to mask words or word fragments to tokens. Here, we are using [🤗's pretrained RoBERTa base model's](https://huggingface.co/roberta-base) checkpoint. Padding is done on the left side since NM radiology reports generally have the findings at the end of the report. Note that you can change out the tokenizer and model to start from a different RoBERTa checkpoint (e.g., ``roberta-large``)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "82688556",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "643657dc06f34a6b951e68c2ff89d969",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/480 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a2e3503071004f45b4d8f1498daed60c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/878k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "926e4a9e99e843caa6817a5c8c6e8d43",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/446k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c8e1829e2b5a4fdab5e367ec8d307f1b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/1.29M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72dcfb94a3634511ba8b4f7a632c9fce",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "afcaeedfde2446e9a747bcc84fbc9985",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from transformers import AutoTokenizer\n",
    "\n",
    "# Specify the model checkpoint for tokenizing and get tokenizer\n",
    "tokenizer = AutoTokenizer.from_pretrained(\n",
    "        \"distilroberta-base\",\n",
    "        use_fast=True,\n",
    "        padding_side=\"left\",\n",
    "    )\n",
    "tokenized_dataset = dataset.map(\n",
    "    lambda examples: tokenizer(examples[\"impression\"], truncation=True, padding=True), \n",
    "    batched=True, \n",
    "    num_proc=1, \n",
    "    remove_columns=[\"impression\"],\n",
    ")  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a4dc1ba",
   "metadata": {},
   "source": [
    "We group texts together and chunk them in samples of length ``block_size``. We use a ``block_size`` of ``128``, but you can adjust this to your needs. Further, you can skip that step if your dataset is composed of individual sentences. This is ultimately the dataset we will use for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54784cea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2a0c9a8cae9e424988e74469209639e6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9d143d5143104994bf4fbcc70ae7a2a9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/1 [00:00<?, ?ba/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def group_texts(examples):\n",
    "    # Sample chunked into size `block_size`\n",
    "    block_size = 128\n",
    "\n",
    "    # Concatenate all texts\n",
    "    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n",
    "    total_length = len(concatenated_examples[list(examples.keys())[0]])\n",
    "    \n",
    "    # We drop the small remainder. We could add padding if the model supported it rather than dropping it.\n",
    "    # This represents the maximum length based on the block size\n",
    "    # You can customize this part to your needs.\n",
    "    max_length = (total_length // block_size) * block_size\n",
    "    result = {k: [t[i : i + block_size] for i in range(0, max_length, block_size)] for k, t in concatenated_examples.items()}\n",
    "    result[\"labels\"] = result[\"input_ids\"].copy()\n",
    "\n",
    "    return result\n",
    "\n",
    "\n",
    "# Group the text into chunks to get \"sentence-like\" data structure\n",
    "lm_dataset = tokenized_dataset.map(\n",
    "    group_texts,\n",
    "    batched=True,\n",
    "    batch_size=1000,\n",
    "    num_proc=1,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "529dc656",
   "metadata": {},
   "source": [
    "## Pretrain the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44c40f08",
   "metadata": {},
   "source": [
    "The ``data_collator`` is a function that is responsible of taking the samples and batching them in tensors. Here we want to do the random-masking. We could do it as a pre-processing step (like we do for tokenization), but then the tokens would always be masked the same way at each epoch. By doing this step inside the ``data_collator``, we ensure this random masking is done in a new way each time we go over the data.\n",
    "\n",
    "To do this masking for us, 🤗 provides a ``DataCollatorForLanguageModeling`` (see their [docs](https://huggingface.co/docs/transformers/v4.15.0/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling)). We can adjust the probability of the masking; here we have chosen a probability of 15%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3483c570",
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import DataCollatorForLanguageModeling\n",
    "\n",
    "# Define a data collator to accomplish random masking\n",
    "# By doing this step in the `data_collator` (vs as a pre-processing step like we do for tokenization),\n",
    "# we ensure random masking is done in a new way each time we go over the data (i.e., per epoch)\n",
    "data_collator = DataCollatorForLanguageModeling(\n",
    "    tokenizer=tokenizer,\n",
    "    mlm=True,\n",
    "    mlm_probability=0.15,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea434dba",
   "metadata": {},
   "source": [
    "Here we define the model checkpoint from which we will start training and then begin training using the 🤗 ``Trainer``, which will train according to the parameters specified in the 🤗 ``TrainingArguments``. 🤗 will take care of all the training for us! When done, the last checkpoint will be used as the starting checkpoint for fine-tuning the Lung, Adrenal, or No Findings model and Lung Recommended Procedure model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88ede4fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0136c4611b6b4a4f9330f7c719c8e130",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading:   0%|          | 0.00/316M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using amp half precision backend\n",
      "/usr/local/lib/python3.8/dist-packages/transformers/optimization.py:306: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use thePyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n",
      "  warnings.warn(\n",
      "***** Running training *****\n",
      "  Num examples = 10\n",
      "  Num Epochs = 4\n",
      "  Instantaneous batch size per device = 32\n",
      "  Total train batch size (w. parallel, distributed & accumulation) = 32\n",
      "  Gradient Accumulation steps = 1\n",
      "  Total optimization steps = 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='4' max='4' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [4/4 00:01, Epoch 4/4]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Epoch</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>No log</td>\n",
       "      <td>4.768126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>No log</td>\n",
       "      <td>2.765447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>No log</td>\n",
       "      <td>4.451561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>No log</td>\n",
       "      <td>2.892946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "***** Running Evaluation *****\n",
      "  Num examples = 5\n",
      "  Batch size = 8\n",
      "Saving model checkpoint to /path/to/results/phase02/demo/checkpoint-2\n",
      "Configuration saved in /path/to/results/phase02/demo/checkpoint-2/config.json\n",
      "Model weights saved in /path/to/results/phase02/demo/checkpoint-2/pytorch_model.bin\n",
      "***** Running Evaluation *****\n",
      "  Num examples = 5\n",
      "  Batch size = 8\n",
      "***** Running Evaluation *****\n",
      "  Num examples = 5\n",
      "  Batch size = 8\n",
      "Saving model checkpoint to /path/to/results/phase02/demo/checkpoint-4\n",
      "Configuration saved in /path/to/results/phase02/demo/checkpoint-4/config.json\n",
      "Model weights saved in /path/to/results/phase02/demo/checkpoint-4/pytorch_model.bin\n",
      "***** Running Evaluation *****\n",
      "  Num examples = 5\n",
      "  Batch size = 8\n",
      "\n",
      "\n",
      "Training completed. Do not forget to share your model on huggingface.co/models =)\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=4, training_loss=4.260141849517822, metrics={'train_runtime': 1.4005, 'train_samples_per_second': 28.562, 'train_steps_per_second': 2.856, 'total_flos': 1326218065920.0, 'train_loss': 4.260141849517822, 'epoch': 4.0})"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from transformers import AutoModelForMaskedLM\n",
    "from transformers import Trainer, TrainingArguments\n",
    "\n",
    "# Define the model\n",
    "model = AutoModelForMaskedLM.from_pretrained(\"distilroberta-base\")\n",
    "\n",
    "# Define the training parameters and 🤗 Trainer\n",
    "training_args = TrainingArguments(\n",
    "    output_dir=\"/path/to/results/phase02/demo\",\n",
    "    overwrite_output_dir=True,\n",
    "    num_train_epochs=4,\n",
    "    per_device_train_batch_size=32,\n",
    "    fp16=True,\n",
    "    save_steps=2,\n",
    "    save_total_limit=2,\n",
    "    evaluation_strategy=\"epoch\",\n",
    "    seed=1,\n",
    "    report_to=\"none\",\n",
    ")\n",
    "trainer = Trainer(\n",
    "    model=model,\n",
    "    args=training_args,\n",
    "    train_dataset=lm_dataset[\"train\"],\n",
    "    eval_dataset=lm_dataset[\"test\"],\n",
    "    data_collator=data_collator,\n",
    ")\n",
    "\n",
    "# Train!\n",
    "trainer.train()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
